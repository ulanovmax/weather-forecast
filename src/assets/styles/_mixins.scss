@use "sass:math";
@use "sass:list";
@use "sass:map";
@use "sass:string";

@mixin media($width) {
	@media only screen and (max-width: "#{$width}px") {
		@content;
	}
}

// Clear bg when autocomplete to transparent
@mixin transparent-bg-input($color: #fff) {
	&:-webkit-autofill,
	&:-webkit-autofill:hover,
	&:-webkit-autofill:focus,
	&:-webkit-autofill:active {
		transition: background-color 5000s ease-in-out 0s;
		-webkit-text-fill-color: $color !important;
	}
}

@mixin font-icomoon {
	font-family: "icomoon" !important;
	speak: never;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

$maxWidth: 1440;
$maxWidthContainer: 1400;
$phoneWidth: 375;
$phoneWidthFontSize: 768;

@function ac($startSize, $minSize, $flag: false) {
	$difference: $startSize - $minSize;
	$addSize: strip-unit($difference);

	@if $difference > 0 {
		@if $flag == false {
			@return min(
				max(
					calc(
						#{$minSize} + #{$addSize} *
							((100vw - #{$phoneWidth}px) / #{$maxWidth - $phoneWidth})
					),
					$minSize
				),
				$startSize
			);
		} @else {
			@return min(
				max(
					calc(
						#{$minSize} + #{$addSize} *
							((100vw - #{$phoneWidth}px) / #{$maxWidthContainer - $phoneWidth})
					),
					$minSize
				),
				$startSize
			);
		}
	} @else {
		@if $flag == false {
			@return min(
				max(
					calc(
						#{$minSize} + #{$addSize} *
							((100vw - #{$phoneWidth}px) / #{$maxWidth - $phoneWidth})
					),
					$startSize
				),
				$minSize
			);
		} @else {
			@return min(
				max(
					calc(
						#{$minSize} + #{$addSize} *
							((100vw - #{$phoneWidth}px) / #{$maxWidthContainer - $phoneWidth})
					),
					$startSize
				),
				$minSize
			);
		}
	}
}

@mixin max-line-leng($num-of-rows) {
	@if $num-of-rows == 1 {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	} @else {
		padding: 0 !important;
		display: -webkit-box;
		-webkit-box-orient: vertical;
		overflow: hidden;
		-webkit-line-clamp: $num-of-rows;
	}
}

@function perc($number1, $number2: 1600) {
	@return percentage(math.div($number1, $number2));
}

@mixin adaptive-square($sizeStart, $sizeMobile) {
	@include adaptive-value("width", $sizeStart, $sizeMobile);
	@include adaptive-value("height", $sizeStart, $sizeMobile);
}

@mixin aspect-ratio($photoWidth, $photoHeight) {
	width: 100%;
	height: 0;
	position: relative;
	padding: {
		bottom: perc($photoHeight, $photoWidth);
	}
	overflow: hidden;

	img,
	iframe,
	video {
		width: 100%;
		height: 100%;
		position: absolute;
		object-fit: cover;
	}
}

@mixin res-blocks($photoWidth, $photoHeight) {
	position: relative;
	overflow: hidden;
	&::before {
		content: "";
		display: block;
		padding-top: perc($photoHeight, $photoWidth);
	}
	img {
		width: 100%;
		height: 100%;
		position: absolute;
		object-fit: cover;
		top: 0;
		left: 0;
	}
}
